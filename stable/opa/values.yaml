# Default values for opa.
# -----------------------
#
# The 'opa' key embeds an OPA configuration file. See
# https://www.openpolicyagent.org/docs/configuration.html for more details.
# If no default config wanted just set opa: false
opa:
  services:
    controller:
      url: "https://www.openpolicyagent.org"
  bundle:
    service: controller
    name: "helm-kubernetes-quickstart"
  default_decision: "/helm_kubernetes_quickstart/main"

# Setup the webhook using cert-manager
certManager:
  enabled: false

# To enforce mutating policies, change to MutatingWebhookConfiguration.
admissionControllerKind: ValidatingWebhookConfiguration

# To _fail closed_ on failures, change to Fail. During initial testing, we
# recommend leaving the failure policy as Ignore.
admissionControllerFailurePolicy: Ignore

# Adds a namespace selector to the admission controller webhook
admissionControllerNamespaceSelector:
  matchExpressions:
    - {key: openpolicyagent.org/webhook, operator: NotIn, values: [ignore]}

# SideEffectClass for the webhook, setting to None enables dry-run
admissionControllerSideEffect: Unknown

# To restrict the kinds of operations and resources that are subject to OPA
# policy checks, see the settings below. By default, all resources and
# operations are subject to OPA policy checks.
admissionControllerRules:
  - operations: ["*"]
    apiGroups: ["*"]
    apiVersions: ["*"]
    resources: ["*"]

# Controls a PodDisruptionBudget for the OPA pod. Suggested use if having opa
# always running for admission control is important
podDisruptionBudget:
  enabled: false
  minAvailable: 1
# maxUnavailable: 1

# The helm Chart will automatically generate a CA and server certificate for
# the OPA. If you want to supply your own certificates, set the field below to
# false and add the PEM encoded CA certificate and server key pair below.
#
# WARNING: The common name name in the server certificate MUST match the
# hostname of the service that exposes the OPA to the apiserver. For example.
# if the service name is created in the "default" nanamespace with name "opa"
# the common name MUST be set to "opa.default.svc".
#
# If the common name is not set correctly, the apiserver will refuse to
# communicate with the OPA.
generateAdmissionControllerCerts: false
admissionControllerCA: "MIIDDzCCAfegAwIBAgIUS1MSGHAbuDRX3J+Lh0s/IBulycAwDQYJKoZIhvcNAQEL
BQAwFjEUMBIGA1UEAwwLb3BhLm9wYS5zdmMwIBcNMTkwNzMwMDcyMzU0WhgPMjI5
MzA1MTQwNzIzNTRaMBYxFDASBgNVBAMMC29wYS5vcGEuc3ZjMIIBIjANBgkqhkiG
9w0BAQEFAAOCAQ8AMIIBCgKCAQEAz07GvD+EHP+WHg7ay5+ofP1OmHkdj+pI9ksA
7dEPd+FwlQRdVGG2hqdha5gc2V6yx1mEqP3c5fTJML5l+Oa9iOt7e+Yla/CT19hR
zvHmNYBrEbMDWuutNij+sOUtnnZzBrM7YsaSZW27qMWLxNvWyh6WmxgImqqSgFQ/
P/DttSJLrTk/92qf4F2WA3Pu6UE9bcOhyOdpHUtxAffZ+vyiK73uSjlif55PtE/+
Vcn+VeuTJFWB7KKxCpemRhUHktPgQDnlODbepVZctewgAeSoW9Kj/BNkoQ7Et+2F
7N2FQTTryFIX+xFra02Q/CYaEUAmTEhukiqRUUfQm4kv1kl0uQIDAQABo1MwUTAd
BgNVHQ4EFgQUReCbGrZBj+CHkdqVc7+BFlOXdRswHwYDVR0jBBgwFoAUReCbGrZB
j+CHkdqVc7+BFlOXdRswDwYDVR0TAQH/BAUwAwEB/zANBgkqhkiG9w0BAQsFAAOC
AQEABGG2D+A5j57G2g8aV6/5mQo1aSCTgAOKMmMPEfRwbxLNZKDwcJnnoeEx34qx
lBXBMtmOSwHZCUl6ebEdSYSc19uMxZA054Bvf+9nL/IY9+vuAOfjOO+hrPIimPD4
enFv1n5KFS48S+zAVqc/0dNzUFEEKZ3fhPswyxoUBCQALu7oyiXtdO1dItPNHLFL
AieeScOxPdwTJZnCrM5EdrFhWf2vP+97HgddAX6cn2YB7S4ggfQrr+J0oXW+7s7n
CJvWeT3ke1cUg9QkFqe8YF6tvhZvNxlp7k8vc08Nd4CbLHozyhtyfaND6y+lX0YD
W6HdtB3C0FAm04QEq5qlgn/fpQ=="
admissionControllerCert: "MIIC9TCCAd2gAwIBAgIUMz6J0FoOjpDdn8O4pUIqFYn6UEMwDQYJKoZIhvcNAQEL
BQAwFjEUMBIGA1UEAwwLb3BhLm9wYS5zdmMwIBcNMTkwNzMwMDcyNzI3WhgPMjI5
MzA1MTQwNzI3MjdaMBYxFDASBgNVBAMMC29wYS5vcGEuc3ZjMIIBIjANBgkqhkiG
9w0BAQEFAAOCAQ8AMIIBCgKCAQEAqSuGp7LLy0UMqFDjpJVj3CUVdF7ahNqSkHG8
hzHDOJQ5m0tpYXmu73SZcdGRXSkFAULLYDGSuf+7fJv7eGbHAUPlrsqlJ8ZBlRAD
4cNUGNsniygi7Thfo9B99r7s7uiJbiC1i9vJsGFLOUi6TeEeNnkMjJO6d0WjEFAT
AMkM8rTpDV1Ln1XzHWDG9VZez7i5RvyX5jYcgvGOXBzJBjGLPGbiQRvfnCsbuPNv
BHoagMD5J82JOV3gpeHjAyJsz8yuhUjoWxTfqPxGBc4pWq1D9VHiP48GytcopAYk
xpSQ1iFdFIJ8JVc1VubrJd6VqUsMEM9RuapLvAsZwYigDsxoUwIDAQABozkwNzAJ
BgNVHRMEAjAAMAsGA1UdDwQEAwIF4DAdBgNVHSUEFjAUBggrBgEFBQcDAgYIKwYB
BQUHAwEwDQYJKoZIhvcNAQELBQADggEBAD7W+HN+GeGjZQjKIvMl+ynS1kOt5gDQ
Nh9Tc+NxgtXCdzz31OYEy+dp+LnCUc86gbY8v9uSfV/gSPzlqylmGIvLOTVvnBHm
4q6nLRb1qfiDCbKkRVb0iHHqe+FqFly4l3NMmbywCXnhz0TJOXRqkvFrwBsTQXYC
oxzBcjQ/WxM550gmwn90KZ8Q2QIjZ/TA/zuuyypB0yQFWTo0wUHnLJmMYiwINolw
H2Gjmd7vnWoA7N84GZjLggioYYjTmNUWRxMkIbWWYcEHTKCiH6urVMJukTDjv0iV
GWLgqgPs7rSb6EWvfBds4zTbddBm0yNpAxsnaqKAzZ3ANH2K5mcYyJU="
admissionControllerKey: "MIIEogIBAAKCAQEAqSuGp7LLy0UMqFDjpJVj3CUVdF7ahNqSkHG8hzHDOJQ5m0tp
YXmu73SZcdGRXSkFAULLYDGSuf+7fJv7eGbHAUPlrsqlJ8ZBlRAD4cNUGNsniygi
7Thfo9B99r7s7uiJbiC1i9vJsGFLOUi6TeEeNnkMjJO6d0WjEFATAMkM8rTpDV1L
n1XzHWDG9VZez7i5RvyX5jYcgvGOXBzJBjGLPGbiQRvfnCsbuPNvBHoagMD5J82J
OV3gpeHjAyJsz8yuhUjoWxTfqPxGBc4pWq1D9VHiP48GytcopAYkxpSQ1iFdFIJ8
JVc1VubrJd6VqUsMEM9RuapLvAsZwYigDsxoUwIDAQABAoIBAB4bB+CqOghXpnQB
yTFOALJ5ywKlqr+/4htgkkuA+JwGDOZtGjjlndMxbelKgVMR7LkXuPfKerEtKKF5
ZNw9dibsfWCI4bFdX+h2LCquRzYRMk1afDS5NpQBk5koyyONMH/vxD86gv8noWp1
XepkKKtLCYeu9p0pQGazyV33aZ17eFR4J+E3BinG83sd1dm6TE+dJADLCEyReNFo
oDTOYlqNUtBovUt0d5eCPWlGqfJJxxa3uM7ZEHXy/is86P2hwHtI5Zo6H0TXxhnh
AW2tSLvk/FDZUGUsnjuU3ntXCaRwH8ablocpROjzwuJbZGIQzCFHjfM+xyvM2mEx
agDC55ECgYEA3UUB5VHWWfW6NyhoATJ1mgdUdBH2uYcAAoMaFFvTlj3dqbWCTZS+
jt0aNe21hiJsehXAbuL4OaE6ZtDC7jXaBJykTp58qV6UIgTrl4R0UVk1R4lc3wRc
92rn7SIEjcpNYBBZbaJXWrYEF5tyZVJ5CXfIIeip3BRWWE68Z+IVLIsCgYEAw7kR
wCKLfJpFDiROX+gbi7nt0R+1yBfvO6r44XSZXxnOAN1Zvz3BQNjpNEVHHCD28DBN
VplYvTslQTDVtf2a/m+8Q8z5otrbcaW5sUaci/JnAmfuZCBcfD41SQAgImbnGhVn
p4dqcMKKz7gHNCX6alSjujbJ52DaC1ostM0xRFkCgYAzQh80TocHhANFb9jYHiZc
LkKEOP0c8YcxDcnm2XbkoSROgjvTWRfj5JiD0bNxhVv31D4l8fJq90yeMNJXeKYu
11LA27opSj2qu9UP3qFLjwzmq42WJF6c+mkL6AuCBVFzZZYx7Z+q5euAxIP1sOtV
JCh6onlnAFcYUfUXY6pgDQKBgE78UP2I82HFoDikzjxGH1e0IRVUBrhJcHJT/Tx/
IaYPc+NFcQKMmYDiCLrfemMPqpgj5hIcsIMta0tzuctIHVSxIvj5r4TZbdXfW6D/
Lg4MNSXza3Fc3fYF5NshAdbgUENmf/5L19jJqdtKGR4idXyTy79KfRCzNUt/iKsu
Y8OBAoGAaMLgKnMyI2AZi6FukoCKiADxECK7DHcHKV1rqTQ5Xxk+1CYqNfFKNJOY
Fy8UYnojicXbPz/Wm8GqC4pEWGn6v/ZdXxa4nMd0xUvDSndik9VdQNzMJbyG3XZR
s21pqRgQDQYAhfSxMivF8uZIRLt9N+xPy6qFOs9s9upDJZPQYFI="

authz:
  # Disable if you don't want authorization.
  # Mostly useful for debugging.
  enabled: true

# Docker image and tag to deploy.
image: openpolicyagent/opa
imageTag: 0.10.7
imagePullPolicy: IfNotPresent

# Port to which the opa pod will bind itself
# NOTE IF you use a different port make sure it maches the ones in the readinessProbe
# and livenessProbe
port: 443

mgmt:
  enabled: true
  image: openpolicyagent/kube-mgmt
  imageTag: 0.8
  imagePullPolicy: IfNotPresent
  extraArgs: []
  resources: {}
  configmapPolicies:
# NOTE IF you use these, remember to update the RBAC rules below to allow
#      permissions to get, list, watch, patch and update configmaps
    enabled: false
    namespaces: [opa, kube-federation-scheduling-policy]
    requireLabel: true
  replicate:
# NOTE IF you use these, remember to update the RBAC rules below to allow
#      permissions to replicate these things
    cluster: []
#     - [group/]version/resource
    namespace: []
#     - [group/]version/resource
    path: kubernetes

# Log level for OPA ('debug', 'info', 'error') (app default=info)
logLevel: info

# Log format for OPA ('text', 'json') (app default=text)
logFormat: text

# Number of OPA replicas to deploy. OPA maintains an eventually consistent
# cache of policies and data. If you want high availability you can deploy two
# or more replicas.
replicas: 1

# To control how the OPA is scheduled on the cluster, set the tolerations and
# nodeSelector values below. For example, to deploy OPA onto the master nodes:
#
# tolerations: [{key: "node-role.kubernetes.io/master", effect: NoSchedule, operator: Exists}]
# nodeSelector: {"kubernetes.io/role": "master"}
tolerations: []
nodeSelector: {}

# To control the CPU and memory resource limits and requests for OPA, set the
# field below.
resources: {}

rbac:
  # If true, create & use RBAC resources
  #
  create: true
  rules:
    cluster: []
    # - apiGroups:
    #     - ""
    #   resources:
    #   - namespaces
    #   verbs:
    #   - get
    #   - list
    #   - watch

serviceAccount:
  # Specifies whether a ServiceAccount should be created
  create: true
  # The name of the ServiceAccount to use.
  # If not set and create is true, a name is generated using the fullname template
  name:

# This proxy allows opa to make Kubernetes SubjectAccessReview checks against the
# Kubernetes API. You can get a rego function at github.com/open-policy-agent/library
sar:
  enabled: false
  image: lachlanevenson/k8s-kubectl
  imageTag: latest
  imagePullPolicy: IfNotPresent
  resources: {}

# To control the liveness and readiness probes change the fields below.
readinessProbe:
  httpGet:
    path: /health
    scheme: HTTPS
    port: 443
  initialDelaySeconds: 3
  periodSeconds: 5
livenessProbe:
  httpGet:
    path: /health
    scheme: HTTPS
    port: 443
  initialDelaySeconds: 3
  periodSeconds: 5

# Set a priorityClass using priorityClassName
# priorityClassName:
